#启动时加上命令行参数或环境变量spring.profiles.active, 即可支持单点模式和集群模式
#在window的host配置文件(C:\Windows\System32\drivers\etc\hosts)或linux的host配置文件(/etc/hosts)中添加以下配置(注意去掉注释符号)
#127.0.0.1      eureka-single
#127.0.0.1      eureka-peer1
#127.0.0.1      eureka-peer2
#127.0.0.1      eureka-peer3

spring:
  application:
    name: spring-clound-eureka
  profiles:
    active: eureka-single
#开启用户权限验证后, eureka心跳发送失败, 关闭权限验证, 暂不处理
#解决方案: https://blog.csdn.net/yy306525121/article/details/81028824
#  security:
#    user:
#      name: admin
#      password: 123456

#自定义服务启动端口
eureka:
  #单点
  single:
    port: 8761
  #集群
  peer1:
    port: 8761
  peer2:
    port: 8762
  peer3:
    port: 8763

  instance:
    #是否优先使用IP地址作为主机名的标识, 默认为false
    preferIpAddress: false
    #eureka客户端向服务端发送心跳的时间间隔, 单位为秒, 默认为30
    leaseRenewalIntervalInSeconds: 30
    #eureka服务端在收到最后一次心跳之后等待的时间上限, 单位为秒, 默认为90.
    #超过该时间之后服务端会将该服务实例从服务清单中剔除,从而禁止服务调用请求被发送到该实例上.
    leaseExpirationDurationInSeconds: 90
  client:
    #从eureka服务端获取注册信息的间隔时间, 单位为秒, 默认为30
    registryFetchIntervalSeconds: 30
    #更新实例信息的变化到eureka服务端的间隔时间, 单位为秒, 默认为30
    instanceInfoReplicationIntervalSeconds: 30
    #初始化实例信息到eureka服务端的间隔时间, 单位为秒, 默认为40
    initialInstanceInfoReplicationIntervalSeconds: 40
    #轮询eureka服务端地址更改的间隔时间, 单位为秒, 默认为300.
    #当我们与Spring Cloud Config配合, 动态刷新eureka的serviceURL地址时需要关注该参数
    eurekaServiceUrlPollIntervalSeconds: 300

    #将eureka客户端的健康检测交给spring-boot-actuator模块的health端点, 以实现更加全面的健康状态维护
    healthcheck:
      enabled: true

management:
  #加载所有的端点(默认只加载了info、health)
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    info:
      show-details: always
    health:
      show-details: always
---
#单点配置
spring:
  profiles: eureka-single
server:
  port: ${eureka.single.port}
eureka:
  instance:
    hostname: eureka-single
  client:
    #表示是否将自己注册到Eureka Server，默认为true
    register-with-eureka: false
    #表示是否从Eureka Server获取注册信息，默认为true
    fetch-registry: false
    service-url:
      defaultZone: http://eureka-single:${eureka.single.port}/eureka/
  server:
    #关闭自我保护机制
    enableSelfPreservation: false
---
#集群配置-节点1
spring:
  profiles: eureka-peer1
server:
  port: ${eureka.peer1.port}
eureka:
  instance:
    hostname: eureka-peer1
  client:
    service-url:
      defaultZone: http://eureka-peer2:${eureka.peer2.port}/eureka/,http://eureka-peer3:${eureka.peer3.port}/eureka/
---
#集群配置-节点2
spring:
  profiles: eureka-peer2
server:
  port: ${eureka.peer2.port}
eureka:
  instance:
    hostname: eureka-peer2
  client:
    service-url:
      defaultZone: http://eureka-peer1:${eureka.peer1.port}/eureka/,http://eureka-peer3:${eureka.peer3.port}/eureka/
---
#集群配置-节点3
spring:
  profiles: eureka-peer3
server:
  port: ${eureka.peer3.port}
eureka:
  instance:
    hostname: eureka-peer3
  client:
    service-url:
      defaultZone: http://eureka-peer1:${eureka.peer1.port}/eureka/,http://eureka-peer2:${eureka.peer2.port}/eureka/
